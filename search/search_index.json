{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Operating Systems: From Boot to DOOM","text":"<p>Sp 2025 is over; see you in Sp 2026!</p> <p>OVERVIEW | LAB1 | LAB2 | LAB3 | LAB4 | LAB5 </p> <p>PAPER</p>"},{"location":"#quick-links","title":"QUICK LINKS","text":"<ul> <li>Syllabus for CS4414/6456, Spring 2025</li> <li>Set up the VM</li> <li>Set up the rpi3 hardware</li> <li>Set up JTAG for rpi3 </li> <li>Prepare SD cards for experiments</li> <li>How to submit</li> </ul>"},{"location":"#overview","title":"OVERVIEW","text":"<p>This course is a \"guided tour\". In one semester, it takes students, who have basic knowledge of the computer software/hardware stack, on the journey of building a modern operating system.</p> <p>Building an OS can be a tough process, and this course is designed to give students continuous rewards -- both intellectually and emotionally -- just as a good video game or theme park would do.</p> <p>This course will start from bare-metal hardware (\"boot\") and incrementally build more features, enable more applications, and eventually run a full-fledged OS, which can run multiple applications (\"DOOM\") and on a multicore processor.</p>"},{"location":"#five-labs-five-prototypes","title":"Five labs, five prototypes","text":"Prototypes Features Proto 1: Baremetal \u2705 UART/printf \u2705 Timers (&amp;multiplexing) \u2705 Interrupts \u2705 Framebuffer &amp; animation Proto 2: Embedded \u2705 Scheduler: cooperative &amp; preemptive \u2705 Memory allocator \u2705 Task management (sleep, wait, exit, kill) Proto 3: Minimal User \u2705 Virtual memory \u2705 User/kernel separation \u2705 Syscalls: fork/write/exec/sbrk/write \u2705 Userspace Proto 4: Simple User \u2705 File abstractions \u2705 A filesystem (xv6) \u2705 procfs, devfs \u2705 More syscalls: fork/write/exec/sbrk/write \u2705 USB keyboard \u2705 Sound device Proto 5: Rich User \u2705 libc (newlib) \u2705 SD card \u2705 FAT32 \u2705 Raspberry Pi GAMEHAT \u2705 DOOM \u2705 Desktop \u2705 Multicore <p>All OS prototypes are functional, albeit increasingly more \"modern\".  The class assignments (called \"quests\") will involve completing key features in these prototypes, enabling more applications to run.</p> <p>Proto 1: Baremetal     A single CPU core can boot, print messages from UART, and display pixels. Interrupts work, allowing periodic rendering of a simple \"donut\" animation. Everything runs in privileged mode (EL1).</p> <p></p> <p>Proto 2: Embedded     This OS resembles what you would see in an \"embedded systems\" course. In addition to Proto 1 features, it can run multiple tasks and preempt their execution. However, everything still runs at EL1.</p> <p></p> <p>Proto 3: Minimal User     This OS introduces virtual memory and user/kernel separation. It provides syscalls and can run one or multiple \"Mario\" applications concurrently in userspace.</p> <p></p> <p>Proto 4: Simple User     The OS now includes file abstraction and file systems. Userspace is built independently of the kernel and executed via <code>exec()</code>. The OS implements more I/O drivers,      notably for USB keyboards and a sound device, exposing them via <code>/proc</code> and <code>/dev</code> to userspace. Userspace comprises a simplified libc and applications including Mario, slider, shell, and a sound tester.</p> <p></p> <p>Proto 5: Rich User     The OS now boots on multicore (four in rpi3). It includes a FAT32 filesystem and an SD driver, allowing file exchange with PC or Mac. It also includes a \"SurfaceFlinger,\" allowing multiple apps to render on the screen and dispatching input events to the correct app. Userspace is more complete, including a full libc, as well as DOOM (a 3D game), a music player, a blockchain miner, etc.</p> <p></p> <p>Proto 5 demo (with sound):</p> <p>https://github.com/user-attachments/assets/6cf05a8e-84f1-4d20-8b01-3e8bcade7cd1</p>"},{"location":"#emulator-or-real-hardware","title":"Emulator or real hardware?","text":"<p>All the code and quests can run on both the emulator (QEMU) and real hardware (Raspberry Pi 3, or rpi3).  Using emulator simplifies debugging, while the rpi3 offers a more authentic OS experience. </p>"},{"location":"#acknowledgement","title":"ACKNOWLEDGEMENT","text":"<p>This course was inspired by and took content from many open-source projects:</p> <ul> <li>NJU OS course (ProjectN): user/kernel interfaces, rich user apps</li> <li>MIT xv6: kernel design</li> <li>Circle: bare-metal Raspberry Pi programming</li> <li>(and many more)</li> </ul>"},{"location":"faq/","title":"CS4414/6456 - Have the right attitude","text":"<p>Updated: Jan 2025</p> <p>Q1: is this course difficult? </p> <p>OS is supposed to be difficult otherwise I'm not doing my job. You need to: </p> <ul> <li>Have a right attitude. Try hard before seeking for help. </li> <li>Master tools, including debugger, git, Google, and ChatGPT</li> <li>Understand code details. </li> <li>Manage setback, emotion, and frustration. </li> </ul> <p>Q2: I have no idea what is going on with assignment X. Help!</p> <p>Have you read the project description and tinkered with the code? Instead of having a vague complaint, please state something concrete such as : \"I understand A. I think B means ... and did some experiments. But I do not know how to get C work. Please help.\" Then bring that to Piazza/OH. </p> <p>Q3: my code does not work. help! </p> <p>As the course goes on, some students will start directly throwing problems to instructors, expecting for answers. Example: \"my program does not work and here is the error message. What should I do?\" This is unacceptable. It's one thing that you attempted and sought for help; it's another thing \"my code breaks, what to do\". </p> <p>Q4: why there are too many low-level details? I am frustrated.  </p> <p>Once again, let me warn everybody there will be a lot of hacking, setbacks, and frustration. What else do you expect from an OS course? It's about plumbing, the dirty jobs that get the million lines of software working. If you expect OS class to be \"push button\" experiences, one that you can type a few commands and everything works magically w/o breaking, there is no such a thing. </p> <p>Q5: Why am I spending all time on code details, instead of learning OS concepts?</p> <p>I hope you attend every lecture, where we teach OS concepts. But if details prevent you from seeing the big picture, you are not spending enough time to master them. </p> <p>Q6: why are some lecture contents unrelated to projects? </p> <p>Lecture contents are a superset of the knowledge needed for the projects. Projects can only cover a small fraction of OS contents that students should know. We don't have enough time. </p>"},{"location":"submission/","title":"Requirements for Submissions","text":"<p>Updated: 01/16/25</p> <ul> <li>Quick reference</li> <li>Detailed instructions<ul> <li>1. Prepare your contents</li> <li>2. Generate a tarball</li> <li>3. What are the requirements for photo/video deliverables?<ul> <li>Photos</li> <li>Videos</li> </ul> </li> <li>4. What are the requirements for writeups?</li> </ul> </li> </ul>"},{"location":"submission/#quick-reference","title":"Quick reference","text":"<p>For the first time (already done for VM users):</p> <pre><code>sudo apt install -y imagemagick ffmpeg\n</code></pre> <p>Every time you want to submit</p> <pre><code>$ COMPUTING_ID=\"xl6yq\" scripts/prep-submission.sh\n</code></pre>"},{"location":"submission/#detailed-instructions","title":"Detailed instructions","text":""},{"location":"submission/#1-prepare-your-contents","title":"1. Prepare your contents","text":"<p>A lab submission will typically include the following: </p> <ul> <li> <p>DELIVERABLES. </p> </li> <li> <p>SOURCE CODE. </p> </li> <li> <p>WRITEUP (if asked). </p> </li> </ul> <p>Assume the current repo is under <code>~/uva-os-world1</code>; this directory is where you clone the lab code repo to, so change it to the actual path. </p> <p>Put DELIVERABLES under <code>~/uva-os-world1/DELIVERABLE/</code> which should contain the following directory structure, e.g. </p> <pre><code>~/uva-os-world1/\n    +--- DELIVERABLE/\n        Quest00/\n        +--- 1.jpg\n        +--- 2.video\n        Quest01/\n        +--- 1.jpg\n        +--- 2.jpg\n        ... \n        Quest03/\n        +----1.pdf\n        ... \n</code></pre> <p>For any writeup that is about the entire lab (not a specific quest),  put it directly under <code>~/uva-os-world1/DELIVERABLE</code>.</p>"},{"location":"submission/#2-generate-a-tarball","title":"2. Generate a tarball","text":"<p>Run the following command (assuming your code is under ~/uva-os-world1 and your computing ID is xl6yq):</p> <pre><code>cd ~/uva-os-world1\n$ COMPUTING_ID=\"xl6yq\" ./scripts/prep-submission.sh\nAll conditions met: All files are smaller than 50MB, DELIVERABLE directory exists, and no empty files in DELIVERABLE.\nTarball created at\n-rw-r--r-- 1 xzl xzl 136K Nov  6 20:56 /tmp/Lab1-xl6yq.tar.gz\nNow double check the content of **/tmp/Lab1-xl6yq.tar.gz**, and submit it to Canvas.\n</code></pre> <p>The script will pack source code but any binaries in the tarball. In the example, the tarball is saved as /tmp/Lab1-xl6yq.tar.gz The above script will run several sanity checks on the submission.  Note the check may not be 100%. You still need to verify the contents of the tarball.</p> <ul> <li>Each submission must be a single tarball (.tar.gz) file.</li> <li>Deliverables must be in separate subdirectories, one for each quest. They must be numbered.</li> <li>The tarball should be named <code>LabX-StudentID.tar.gz</code> where <code>X</code> is the lab number and <code>StudentID</code> is the student's UVA login. For team submissions, name it <code>LabX-StudentID1-StudentID2.tar.gz</code>.</li> </ul> <p>Upload the tarball to Canvas per the syllabus instructions.</p>"},{"location":"submission/#3-what-are-ther-requirements-for-photovideo-deliverables","title":"3. What are ther requirements for photo/video deliverables?","text":"<p>Photos and videos: </p> <ul> <li>Must be captured with student smartphones (NO screen recording tools).- UVA ID card must be displayed,  clearly visible, in all photos and videos.</li> <li>If multiple students are involved in the submission, only one ID card needs to be displayed. </li> <li>No post-editing allowed. If the photo or video is too long or large, adjust smartphone settings and recapture.</li> </ul>"},{"location":"submission/#photos","title":"Photos:","text":"<ul> <li>Minimum resolution: 1024x1024 pixels. <ul> <li>prep-submission.sh will help check this</li> </ul> </li> <li>Must be viewable on Windows or Mac without special software.</li> </ul> <p>Violation: will not be graded.</p>"},{"location":"submission/#videos","title":"Videos:","text":"<ul> <li>Minimum resolution: 1024x1024 pixels. </li> <li>Higher resolution is acceptable, but a single video file must not exceed 50MB.</li> <li>Duration: 5-10 seconds.<ul> <li>prep-submission.sh will help check all the above</li> </ul> </li> <li>Must be viewable on Windows or Mac without special software.</li> </ul> <p>Violation: will not be graded.</p> <p>Sample (your resolution should meet the above requirements):</p> <p></p>"},{"location":"submission/#4-what-are-ther-requirements-for-writeups","title":"4. What are ther requirements for writeups?","text":"<ul> <li>Must be in PDF or TXT format.</li> <li>Shall not exceed one page, unless otherwise specified.</li> </ul> <p>Violation: will not grade.</p>"},{"location":"syllabus-24sp/","title":"CS4414 Syllabus","text":"<p>Last updated: January 2024</p>"},{"location":"syllabus-24sp/#welcome-everyone","title":"WELCOME EVERYONE","text":"<p>You must read this FAQ before proceeding. </p>"},{"location":"syllabus-24sp/#logistics","title":"LOGISTICS","text":"<p>Tue/Thu (01/17/2024 to 04/30/2024) , 02:00 PM - 03:15 PM, Thornton Hall E316</p> <p>Zoom/recordings will be available</p>"},{"location":"syllabus-24sp/#instruction-team","title":"Instruction team","text":"<p>Instructor</p> <ul> <li>Prof. Felix Lin               xl6yq@virginia.edu</li> </ul> <p>TAs </p> <ul> <li>Wonkyo Choe (PhD student)             bfr4xr@virginia.edu</li> <li>Rongxiang Wang (PhD student)          waq9hw@virginia.edu</li> <li>Akhil Shekar (PhD student)     as8hu@virginia.edu</li> </ul> <p>Office hours:</p> <p>Location: Rice 442</p> <ul> <li>Mon   11-12p           </li> <li>Tue   10-11a</li> <li>Thu   1030-1130a (starting from Feb 22nd)</li> <li> <p>Thu  330-430p            </p> </li> <li> <p>The TAs will: answer questions; give suggestions on your code; offer debugging pointers</p> </li> <li>The TAs will not: write or debug your code for you </li> </ul>"},{"location":"syllabus-24sp/#grading-submission","title":"GRADING &amp; SUBMISSION","text":""},{"location":"syllabus-24sp/#projects","title":"Projects","text":"<p>Most of your time (like &gt;80%) will be spent on four projects. </p> <p>Each project has one or more assignments. Each assignment may have a different weight.</p> Project Weights You will  build ... Learning  objectives p1: kernel 40 A tiny, modern kernel for Raspberry Pi 3 Roll-your-own kernel, baremetal programming, Armv8, SoC hardware p2: concurrency 20 Scaling up data structures on multicores Programming  a large number of cores, profiling, performance debugging p3: TEE 25+(bonus)10 A machine learning service secured by Arm TrustZone Security, hardware-based isolation, embedded  AI p4:persistence 10 Filesystem image forensics Reverse engineering, binary data structures, working with filesystems Participation 5 <ul> <li>Online grade calculator (Google spreadsheet). </li> </ul>"},{"location":"syllabus-24sp/#submissions","title":"Submissions","text":"<p>Submissions are done via the UVA LMS. Submission will be closed after the deadline. </p> <p>Repeated submissions. Before the deadline, submit as many times as you like. Earlier submissions will be overwritten. </p> <p>Late submissions. Once the submission is closed, do NOT email the instructor or the TAs. Such emails will be automatically ignored. All submissions are due at 5pm. NOT the midnight. </p> <p>Use of diff files. Some submissions may ask you to submit a diff file, which may be generated by the \"diff\" or \"git-diff\" commands (detailed instructions will be provided). </p> <ul> <li>The point of submitting a diff file -- allows the TAs to quickly spot what you have done</li> <li>A diff file is a textual file, which is supposed to contain all code changes made by you. Please always manually inspect the diff file prior to submission. </li> <li>If your diff file is super large (&gt;100KB), it is likely because of the line ending issue: the diff file mistakenly includes conceptually identical lines that only differ in line ending characters (CRLF vs LF). Please do submit such a large diff file. Fix the problem. You can easily find solution via Piazza, Google, or ChatGPT. </li> <li>Do not wait until the last minute to learn diff and git-diff, which may surprise you.   </li> <li>If you fear that git-diff (and any other git commands) will mess up your local code, you can always make a copy of the whole project directory and run the git commands on that copy</li> </ul>"},{"location":"syllabus-24sp/#accommodations","title":"Accommodations","text":"<p>To accommodate students': </p> <p>career development, health issues, family and/or personal emergency, busy study and life schedule, non-UVA network failures, non-UVA power outage, broken laptops, accidental loss of code, misread of the deadlines, forgetting to submit, forgetting passwords, unable to use the LMS while others can, unable to compress/upload the code, unable to use diff, unable to create a tarball, as well as other unexpected life events, we have the following policy: </p> <p>At the end of the semester, the two assignments (NOT projects) with ~~lowest scores~~ (the highest negative impacts, considering both assignment scores and assignment weights) will be automatically dropped. </p> <p>04/09/24: revised the language above. Also added the following explanation: remove such two assignments; scale the scores of the remaining assignments to the total project weights for the whole semester (e.g. 95% as above).</p> <p>No additional requests are needed. </p>"},{"location":"syllabus-24sp/#how-i-measure-participation","title":"How I measure participation","text":"<p>The factors we consider include, but not limited to the following:  \u2022   Classroom attendance  \u2022   OH attendance (with TAs or instructor) \u2022   Online discussion  We expect a student to participate in some of the above activities (not necessarily all). </p> <p>Do NOT ask for our formula on how we calculate the participation points \u2013 as it is difficult to figure out one to cover all the above factors. You will need to trust that the instructor will give fair participation points. If you disagree with your participation points after the grade is out, talk to the instructor. </p>"},{"location":"syllabus-24sp/#how-i-determine-the-final-grades","title":"How I determine the final grades","text":"<p>https://fxlin.github.io/final-grades.pdf</p>"},{"location":"syllabus-24sp/#servers","title":"SERVERS","text":"<p>For projects, students are encouraged to use the CS departmental servers. We will provide detailed access instructions and technical support throughout. They are recommended. They are NOT mandatory. You can use, e.g. your own machines or AWS; but we do NOT provide technical support for anything other the CS servers. </p> <p>Your processes may be killed; the servers may be rebooted. This happened previously when some students (or their VSCode extensions) run too many processes. When that happens, servers will be super slow and non usable. We will have to manually kill processes and/or reboot the servers. Before that, we will give everyone 10 minutes ahead of time notice via LMS announcement. </p>"},{"location":"syllabus-24sp/#code-safety","title":"CODE SAFETY","text":"<p>It is the students' SOLE responsibility to keep their code safe. </p> <p>Back up your code regularly. Like, every hour. </p> <p>Back up to multiple places including cloud storage your local machines. This is because you may accidentally delete your code, the servers may crash, disks may malfunction, etc. Always assume that the storage is unreliable. </p> <p>The servers may crash unexpectedly and you may lose all your code/data. Of course we try out best not screw them up. But sometimes we make mistakes. Sometimes some incidents beyond our control happen. </p> <p>Know basic git commands. Git is prerequisite of this course and modern software development. For instance, when told to do ``git pull'', be prepared to avoid or handle possible local conflicts. Do not blame anyone for conflicts. </p> <p>If you fear that any git command may mess up your local code, you can always make a copy of the whole project directory and run the git commands on that copy. </p>"},{"location":"syllabus-24sp/#online-discussions","title":"Online discussions","text":"<p>Class link: https://piazza.com/virginia/spring2024/24spoperatingsystems/home</p> <p>Sign up: https://piazza.com/virginia/spring2024/24spoperatingsystems Code: 666666</p>"},{"location":"syllabus-24sp/#response-time","title":"Response time","text":"<p>The instruction team is committed to response Piazza questions: </p> <ul> <li> <p>During business hours (8a-5p): &lt; 2 hours</p> </li> <li> <p>Out of business hours, on days when UVA is open: next day</p> </li> <li>Weekends, UVA holidays: no guarantee, with best efforts</li> </ul> <p>The response time is independent of any upcoming deadline. </p> <p>Note: Raise questions well before the deadlines. Do NOT expect a faster response just because it's right before the deadline. </p>"},{"location":"syllabus-24sp/#course-contents","title":"COURSE CONTENTS","text":""},{"location":"syllabus-24sp/#overall-goals","title":"Overall goals","text":"<p>\u2022   Cover the core &amp; modern OS concepts (e.g. virtual machines) and leaves out old ones (e.g. disk scheduling)  \u2022   Teach via first-hand, real-hardware programming experience more than lectures  </p>"},{"location":"syllabus-24sp/#who-is-this-for","title":"Who is this for?","text":"<p>Students 1) who want to be informed programmers or 2) who are interested in systems programming.  </p>"},{"location":"syllabus-24sp/#prerequisites","title":"Prerequisites","text":"<p>C programming; use of Linux; registers; assembly basics; memory hierarchy; virtual memory</p>"},{"location":"syllabus-24sp/#detailed-course-goals","title":"Detailed course goals","text":"<p>This course will cover the fundamentals of operating systems. It will focus on key operating systems concepts and components, including process, virtual memory, concurrency, and file system. It will also introduce modern operating system designs as response to emerging hardware trends\u2009\u2014\u2009manycore, energy efficiency, security, etc. </p> <p>This course will convey useful techniques in system software construction through hands-on projects, as well as important design principles commonly seen in system software, including abstraction, modularity, policy vs mechanism, interface vs implementation, etc. </p>"},{"location":"syllabus-24sp/#reading","title":"Reading","text":"<p>There is no official textbook. If you insist on having one: Operating Systems: Three Easy Pieces, Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau </p>"},{"location":"syllabus-24sp/#policies","title":"POLICIES","text":""},{"location":"syllabus-24sp/#honor","title":"Honor","text":"<p>I trust every student in this course to fully comply with all of the provisions of the University\u2019s Honor Code. By enrolling in this course, you have agreed to abide by and uphold the Honor System of the University of Virginia. </p>"},{"location":"syllabus-24sp/#use-of-generative-ai-eg-chatgpt","title":"Use of generative AI (e.g. ChatGPT)","text":"<p>Allowed: If you use ChatGPT as a way to collect info (like Google) and put together the answer in your own language/code. If you did so, you must clearly state in the submission, including what info is from ChatGPT and how it is used. </p> <p>Not allowed: copy &amp; paste from ChatGPT, it is unacceptable. </p>"},{"location":"syllabus-24sp/#whiteboard-only-collaboration","title":"Whiteboard only collaboration","text":"<p>is meant to convey the type of discussion where participants gather around a whiteboard to solve a problem together, without taking any notes from their discussion, and then erasing the whiteboard before they disperse.</p> <p>In particular, you may discuss problems and solutions, but the only thing you may take away from your discussion is your brain. This means you may not produce any records or artifacts from your collaborations, including: notes, screenshots, photos, figures, audio/video recordings, documents (inluding google docs), links, or any other digital or tangible thing. Nor may you share any files, links, etc. with other students outside of a collaboration session. Any substantially similar expression of the same solution can only occur if collaboration extends beyond whiteboard only, and so will be considered as evidence of a policy violation.</p> <p>In your submission, please clearly state the students you had discussion with. </p> <p>(adopted from policy by Dr. Nathan Brunelle for DSA2, under CC-BY-NC-SA 4.0)</p>"},{"location":"syllabus-24sp/#disabilities","title":"Disabilities","text":"<p>The University of Virginia strives to provide accessibility to all students. If you require an accommodation to fully access this course, please contact the Student Disability Access Center (SDAC) at (434) 243-5180 or sdac@virginia.edu. If you are unsure if you require an accommodation, or to learn more about their services, you may contact the SDAC at the number above or by visiting their website at http://studenthealth.virginia.edu/student-disability-access-center/faculty-staff. </p>"},{"location":"syllabus-24sp/#your-wellbeing","title":"Your wellbeing","text":"<p>The Computer Science Department and SEAS aims to promote their students\u2019 wellbeing. If you are feeling overwhelmed, stressed, or isolated, there are many individuals here who are ready and wanting to help. If you wish, you can make an appointment with me and come to my office to talk in private. </p> <p>Alternatively, there are also other University of Virginia resources available. The Student Health Center offers Counseling and Psychological Services (CAPS) for its students. Call 434-243-5150 or 434-972-7004 for after hours and weekend crisis assistance) to get started and schedule an appointment. If you prefer to speak anonymously and confidentially over the phone, call Madison House\u2019s HELP Line at any hour of any day: 434-295-8255. </p> <p>If you or someone you know is struggling with gender, sexual, or domestic violence, there are many community and University of Virginia resources available. The Office of the Dean of Students, Sexual Assault Resource Agency (SARA), Shelter for Help in Emergency (SHE), and UVA Women\u2019s Center are ready and eager to help. Contact the Director of Sexual and Domestic Violence Services at 434-982-2774. </p>"},{"location":"syllabus-24sp/#diversity","title":"Diversity","text":"<p>It is the instructors\u2019 intent that students from all diverse backgrounds and perspectives be well served by this course, that students\u2019 learning needs be addressed both in and out of class, and that the diversity that students bring to this class be viewed as a resource, strength and benefit. It is my intent to present materials and activities that are respectful of diversity: gender, sexuality, disability, age, socioeconomic status, ethnicity, race, and culture. Your suggestions are encouraged and appreciated. Please let me know ways to improve the effectiveness of the course for you personally or for other students or student groups. </p>"},{"location":"syllabus-24sp/#religious-accommodations","title":"Religious accommodations","text":"<p>It is the University\u2019s long-standing policy and practice to reasonably accommodate students so that they do not experience an adverse academic consequence when sincerely held religious beliefs or observances conflict with academic requirements. Students who wish to request academic accommodation for a religious observance should submit their request in writing directly to me by email as far in advance as possible. Students and instructors who have questions or concerns about academic accommodations for religious observance or religious beliefs may contact the University\u2019s Office for Equal Opportunity and Civil Rights (EOCR) at UVAEOCR@virginia.edu or 434-924-3200. Accommodations do not relieve you of the responsibility for completion of any part of the coursework missed as the result of a religious observance. </p>"},{"location":"syllabus-24sp/#power-based-personal-violence","title":"Power-based personal violence","text":"<p>The University of Virginia is dedicated to providing a safe and equitable learning environment for all students. To that end, it is vital that you know two values that I and the University hold as critically important: </p> <ol> <li>Power-based personal violence will not be tolerated. </li> <li>Everyone has a responsibility to do their part to maintain a safe community on Grounds. </li> </ol> <p>If you or someone you know has been affected by power-based personal violence, more information can be found on the UVA Sexual Violence website that describes reporting options and resources available - www.virginia.edu/sexualviolence. </p> <p>As your professor and as a person, know that I care about you and your well-being and stand ready to provide support and resources as I can. As a faculty member, I am a responsible employee, which means that I am required by University policy and federal law to report what you tell me to the University's Title IX Coordinator. The Title IX Coordinator's job is to ensure that the reporting student receives the resources and support that they need, while also reviewing the information presented to determine whether further action is necessary to ensure survivor safety and the safety of the University community. If you would rather keep this information confidential, there are Confidential Employees you can talk to on Grounds (See http://www.virginia.edu/justreportit/confidential_resources.pdf). The worst possible situation would be for you or your friend to remain silent when there are so many here willing and able to help. </p>"},{"location":"syllabus-25sp/","title":"Operating Systems: From Boot to DOOM","text":""},{"location":"syllabus-25sp/#syllabus-for-cs44146456-spring-2025","title":"Syllabus for CS4414/6456 , Spring 2025","text":"<p>Last updated: Jan 2025</p> <p>Note: this is a new cs4414. As the UVA CS department completes the migration to the new undergraduate curriculum, this course has been redesigned accordingly. It is different from my previous offerings of CS4414 (up to Spring 2024), which you can see here.</p> <p>Special note on doubling counting CS4414/6456: </p> <ul> <li> <p>It is OK: if you have taken my CS4414 prior to Spring 2025 and is taking CS6456 in Spring 2025.  The two courses are different enough. </p> </li> <li> <p>It is NOT OK: if you take my CS4414 as an undergraduate in Spring 2025 and take my CS6456 again in 2026/2027/2028 as a graduate student. </p> </li> </ul>"},{"location":"syllabus-25sp/#table-of-contents","title":"Table of Contents","text":"<ul> <li>SCHEDULE</li> <li>FIRST THINGS FIRST<ul> <li>Attitude</li> <li>Prerequisite</li> <li>Code safety</li> </ul> </li> <li>LOGISTICS<ul> <li>Instruction team</li> <li>Requirements for CS6456 students?</li> <li>Work individually or as teams?</li> <li>Can I use GenAI?</li> <li>Textbook - None</li> </ul> </li> <li>EQUIPMENT<ul> <li>Emulator or real hardware?</li> <li>Dev machines</li> <li>Rpi3</li> </ul> </li> <li>SUBMISSIONS</li> <li>GRADING<ul> <li>How I measure participation</li> <li>How I determine the final grades</li> </ul> </li> <li>HELP!<ul> <li>Response time</li> </ul> </li> <li>POLICIES<ul> <li>Honor</li> <li>Whiteboard only collaboration</li> <li>Disabilities</li> <li>Your wellbeing</li> <li>Diversity</li> <li>Religious accommodations</li> <li>Power-based personal violence</li> </ul> </li> </ul>"},{"location":"syllabus-25sp/#schedule","title":"SCHEDULE","text":""},{"location":"syllabus-25sp/#first-things-first","title":"FIRST THINGS FIRST","text":""},{"location":"syllabus-25sp/#attitude","title":"Attitude","text":"<p>Read this FAQ before proceeding. </p>"},{"location":"syllabus-25sp/#prerequisite","title":"Prerequisite","text":"<p>This course assumes the following prerequisites:</p> <ul> <li> <p>CS2130 (CSO1, sample):</p> <ul> <li>C programming</li> <li>Assembly language (some), including converting C to assembly</li> <li>Command line usage, handling arguments</li> <li>Hexadecimal representation, data representation in memory (big/little endian)</li> <li>GDB (or LLDB)</li> <li>Using libc</li> </ul> </li> <li> <p>CS3130 (CSO2, sample):</p> <ul> <li>Concepts: IRQ, virtual memory, cache, CPU, concurrency &amp; synchronization</li> <li>Labs: Makefile usage, shell scripting, process virtual memory observation, demand paging observation</li> <li>Page table manipulation (simulation of multi-level page table)</li> <li>User-level synchronization, TLB toy application (emulated), pthreads, dining philosophers problem</li> <li>Application: \"Life\" emulation</li> </ul> </li> </ul> <p>Important Note for Incoming Students</p> <p>All incoming students should thoroughly understand the above contents. Exemptions may be granted on a case-by-case basis, particularly for graduate students who have not taken UVA undergraduate courses. However, students must be aware of the risks and be prepared to invest a significant amount of time to catch up.</p>"},{"location":"syllabus-25sp/#do-not-share-your-code-publicly","title":"Do not share your code publicly","text":"<p>Keep your code to yourself; if it is a github repository, make it private. </p> <p>This applies to the duration of the semester, and AFTER the semester. </p> <p>Making the code public could ruin the experience of future students; it also compromises the instructor's effort on designing the quests. </p> <p>PLEASE DO NOT SHARE YOUR CODE PUBLICLY!</p>"},{"location":"syllabus-25sp/#code-safety","title":"Code safety","text":"<p> It is the students' sole responsibility to keep their code safe.  Accidental loss of code is not an excuse for late submission.  </p> <p>Back up your code regularly. Like, every hour. </p> <p>Back up to multiple places including cloud storage your local machines. This is because you may accidentally delete your code, the servers may crash, disks may malfunction, etc. Always assume that the storage is unreliable. </p> <p>Know basic git commands. Git is prerequisite of this course and modern software development. For instance, when told to do ``git pull'', be prepared to avoid or handle possible local conflicts. Do not blame anyone for conflicts. </p>"},{"location":"syllabus-25sp/#logistics","title":"LOGISTICS","text":"<p>Tue/Thu (01/14/2025 to 04/29/2025) , 12:30 PM - 01:45 PM, OLS 011</p> <p>Zoom/recordings will be available</p>"},{"location":"syllabus-25sp/#instruction-team","title":"Instruction team","text":"<p>Instructor</p> <ul> <li>Prof. Felix Lin               xl6yq@virginia.edu</li> </ul> <p>TAs (updated 1/15/25) </p> <ul> <li>Wonkyo Choe (PhD student)             bfr4xr@</li> <li>Rongxiang Wang (PhD student)          waq9hw@</li> <li>Afsara Benazir (PhD student)          hys4qm@</li> </ul> <p>Office hours (updated 1/15/25)</p> <p>Location: Rice 442</p> <ul> <li>Mon   4-5p</li> <li>Tue   10-11a</li> <li>Thu   2-3p </li> <li> <p>Thu  4-5p            </p> </li> <li> <p>The TAs will: answer questions; give suggestions on your code; offer debugging pointers</p> </li> <li>The TAs will not: write or debug your code for you </li> </ul>"},{"location":"syllabus-25sp/#requirements-for-cs6456-students","title":"Requirements for CS6456 students?","text":"<p>This course may be crosslisted as CS6456. </p> <p>In addition to a submission per the lab description, a CS6456 student must submit:</p> <ul> <li>a one-page writeup for each lab sumission, summarizing the key design decisions, challenges, and lessons learned.</li> </ul> <p>The writeup must be submitted as part of the submission. </p> <p>The writeup constitutes 10% of the lab grade for CS6456 students. </p>"},{"location":"syllabus-25sp/#work-individually-or-as-teams","title":"Work individually or as teams?","text":"<p>Lab 1--3 are individual work. Lab 4--5 are team work.</p> <p>Each team: 2 students. 3-student teams are only approved as exceptions and will be held against a higher bar for grading.  CS4414 and CS6456 students shall NOT form a team (because they have different grading criteria).</p> <p>Exceptions to the above rules may be discussed with the instructors. </p>"},{"location":"syllabus-25sp/#can-i-use-genai","title":"Can I use GenAI?","text":"<p>Yes, the instructor believes that GenAI (such as ChatGPT and Copilot) is transforming how we write code and freeing us from memorizing low-level hardware/software details. Therefore:</p> <ul> <li>You are encouraged to use Copilot to generate code snippets. You must clearly state in your submission what information is from Copilot and how it is used.</li> <li>Be warned: GenAI can produce code with subtle bugs that are difficult to debug.</li> <li>Programming quests: The instructor expects students to use GenAI. The instructor hence designed these tasks more challenging than traditional ones without GenAI (e.g., writing assembly code for manipulating the stack frame).</li> <li>Tooling/scripting tasks: for tasks such as using GDB, diff, and git, the instructor expects students to ask GenAI for help. ChatGPT is fantastic in explaining how to use these tools.</li> </ul> <p>Therefore, the project descriptions often say \"Use AI\" to encourage its use. But in general, you can use it in any way you find helpful.</p>"},{"location":"syllabus-25sp/#textbook-none","title":"Textbook - None","text":"<p>There is no official textbook. If you insist on having one: Operating Systems: Three Easy Pieces, Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau </p>"},{"location":"syllabus-25sp/#equipment","title":"EQUIPMENT","text":""},{"location":"syllabus-25sp/#emulator-or-real-hardware","title":"Emulator or real hardware?","text":"<p>All the code can run on both the emulator (QEMU) and real hardware (Raspberry Pi 3, or rpi3).</p> <p>The expectation is that students will start with the emulator and gradually migrate to testing their code on both the emulator and real hardware.</p> <p>Students shall buy rpi3 ($35) at own expense. The instructor will provide all other needed accessories, on a need basis.</p> <p>Assignments early in the semester can be done with full credits using QEMU.  Assignments later in the semester can be done with QEMU for partial credits, and with rpi3 for full credits.</p>"},{"location":"syllabus-25sp/#dev-machines","title":"Dev machines","text":"<p>Use your own computers.  Windows/Linux is preferred as they are our test platforms; Mac also work but may have technical issues.  The instruction team is committted to support Mac. You can get a loaner Windows laptop from the CS IT, if needed. </p>"},{"location":"syllabus-25sp/#rpi3","title":"Rpi3","text":"<p>If you choose to do the assignments on real hardware, you will need a Raspberry Pi 3. You must buy it yourself with $35. </p> <p>We will provide all other needed accessories, on a need basis:  - UART cable for debugging - SD card and reader - External display and HDMI cable - Power supply - USB keyboard - Waveshare Game HAT for rpi3</p>"},{"location":"syllabus-25sp/#submissions","title":"SUBMISSIONS","text":"<p>Submissions are done via the UVA LMS. Submission will be closed after the deadline. </p> <p>Repeated submissions. Before the deadline, submit as many times as you like. Earlier submissions will be overwritten. </p> <p>Sumit often; submit early. </p> <p>Late submissions. Once the submission deadline has passed: do NOT try to submit; do NOT email the instructor or the TAs.  Such emails will be automatically ignored. All submissions are due at 5pm. NOT the midnight. </p> <p>Submission instructions.</p> <p>https://github.com/fxlin/uva-os-world1/blob/student/docs/submission.md</p>"},{"location":"syllabus-25sp/#grading","title":"GRADING","text":"Component Percentage Lab 1 10% Lab 2 15% Lab 3 20% Lab 4 25% Lab 5 25% Participation 5% Total 100%"},{"location":"syllabus-25sp/#how-i-measure-participation","title":"How I measure participation","text":"<p>The factors we consider include, but not limited to the following:  \u2022   Classroom attendance  \u2022   OH attendance (with TAs or instructor) \u2022   Online discussion  We expect a student to participate in some of the above activities (not necessarily all). </p> <p>Do NOT ask for our formula on how we calculate the participation points \u2013 as it is difficult to figure out one to cover all the above factors. You will need to trust that the instructor will give fair participation points. If you disagree with your participation points after the grade is out, talk to the instructor. </p>"},{"location":"syllabus-25sp/#how-do-bonus-points-affect-my-grade","title":"How do bonus points affect my grade?","text":"<p>Each lab has some bonus points, which only contribute to that lab, not other labs. </p> <p>If full credit was not achieved on a previous lab, do bonus points achieved in a later lab have any effect in raising that previous labs score? - No</p> <p>Bonus points beyond 100% will be considered for A+, which I only give to a few students per year.\u00a0</p> <p>If a student happens to be on the boundary of A/A- (or B/B-), yes bonus points will help. </p> <p>Overall, my principles are:\u00a0</p> <ul> <li> <p>I appreciate students doing extra bonus points\u00a0</p> </li> <li> <p>I want to set a clear expectation up front (e.g. what is needed to get a \"A\"), rather than having students doing as much bonus as possible.</p> </li> </ul>"},{"location":"syllabus-25sp/#how-i-determine-the-final-grades","title":"How I determine the final grades","text":"<p>https://fxlin.github.io/final-grades.pdf</p>"},{"location":"syllabus-25sp/#help","title":"HELP!","text":"<p>Use Piazza linked in the Canvas page. </p>"},{"location":"syllabus-25sp/#response-time","title":"Response time","text":"<p>The instruction team is committed to response Piazza questions: </p> <ul> <li> <p>During business hours (8a-5p): &lt; 2 hours</p> </li> <li> <p>Out of business hours, on days when UVA is open: next day</p> </li> <li>Weekends, UVA holidays: no guarantee, with best efforts</li> </ul> <p>The response time is independent of any upcoming deadline. </p> <p>Note: Raise questions well before the deadlines. Do NOT expect a faster response just because it's right before the deadline. </p>"},{"location":"syllabus-25sp/#policies","title":"POLICIES","text":""},{"location":"syllabus-25sp/#honor","title":"Honor","text":"<p>I trust every student in this course to fully comply with all of the provisions of the University\u2019s Honor Code. By enrolling in this course, you have agreed to abide by and uphold the Honor System of the University of Virginia. </p>"},{"location":"syllabus-25sp/#whiteboard-only-collaboration","title":"Whiteboard only collaboration","text":"<p>is meant to convey the type of discussion where participants gather around a whiteboard to solve a problem together, without taking any notes from their discussion, and then erasing the whiteboard before they disperse.</p> <p>In particular, you may discuss problems and solutions, but the only thing you may take away from your discussion is your brain. This means you may not produce any records or artifacts from your collaborations, including: notes, screenshots, photos, figures, audio/video recordings, documents (inluding google docs), links, or any other digital or tangible thing. Nor may you share any files, links, etc. with other students outside of a collaboration session. Any substantially similar expression of the same solution can only occur if collaboration extends beyond whiteboard only, and so will be considered as evidence of a policy violation.</p> <p>In your submission, please clearly state the students you had discussion with. </p> <p>(adopted from policy by Dr. Nathan Brunelle for DSA2, under CC-BY-NC-SA 4.0)</p>"},{"location":"syllabus-25sp/#disabilities","title":"Disabilities","text":"<p>The University of Virginia strives to provide accessibility to all students. If you require an accommodation to fully access this course, please contact the Student Disability Access Center (SDAC) at (434) 243-5180 or sdac@virginia.edu. If you are unsure if you require an accommodation, or to learn more about their services, you may contact the SDAC at the number above or by visiting their website at http://studenthealth.virginia.edu/student-disability-access-center/faculty-staff. </p>"},{"location":"syllabus-25sp/#your-wellbeing","title":"Your wellbeing","text":"<p>The Computer Science Department and SEAS aims to promote their students\u2019 wellbeing. If you are feeling overwhelmed, stressed, or isolated, there are many individuals here who are ready and wanting to help. If you wish, you can make an appointment with me and come to my office to talk in private. </p> <p>Alternatively, there are also other University of Virginia resources available. The Student Health Center offers Counseling and Psychological Services (CAPS) for its students. Call 434-243-5150 or 434-972-7004 for after hours and weekend crisis assistance) to get started and schedule an appointment. If you prefer to speak anonymously and confidentially over the phone, call Madison House\u2019s HELP Line at any hour of any day: 434-295-8255. </p> <p>If you or someone you know is struggling with gender, sexual, or domestic violence, there are many community and University of Virginia resources available. The Office of the Dean of Students, Sexual Assault Resource Agency (SARA), Shelter for Help in Emergency (SHE), and UVA Women\u2019s Center are ready and eager to help. Contact the Director of Sexual and Domestic Violence Services at 434-982-2774. </p>"},{"location":"syllabus-25sp/#diversity","title":"Diversity","text":"<p>It is the instructors\u2019 intent that students from all diverse backgrounds and perspectives be well served by this course, that students\u2019 learning needs be addressed both in and out of class, and that the diversity that students bring to this class be viewed as a resource, strength and benefit. It is my intent to present materials and activities that are respectful of diversity: gender, sexuality, disability, age, socioeconomic status, ethnicity, race, and culture. Your suggestions are encouraged and appreciated. Please let me know ways to improve the effectiveness of the course for you personally or for other students or student groups. </p>"},{"location":"syllabus-25sp/#religious-accommodations","title":"Religious accommodations","text":"<p>It is the University\u2019s long-standing policy and practice to reasonably accommodate students so that they do not experience an adverse academic consequence when sincerely held religious beliefs or observances conflict with academic requirements. Students who wish to request academic accommodation for a religious observance should submit their request in writing directly to me by email as far in advance as possible. Students and instructors who have questions or concerns about academic accommodations for religious observance or religious beliefs may contact the University\u2019s Office for Equal Opportunity and Civil Rights (EOCR) at UVAEOCR@virginia.edu or 434-924-3200. Accommodations do not relieve you of the responsibility for completion of any part of the coursework missed as the result of a religious observance. </p>"},{"location":"syllabus-25sp/#power-based-personal-violence","title":"Power-based personal violence","text":"<p>The University of Virginia is dedicated to providing a safe and equitable learning environment for all students. To that end, it is vital that you know two values that I and the University hold as critically important: </p> <ol> <li>Power-based personal violence will not be tolerated. </li> <li>Everyone has a responsibility to do their part to maintain a safe community on Grounds. </li> </ol> <p>If you or someone you know has been affected by power-based personal violence, more information can be found on the UVA Sexual Violence website that describes reporting options and resources available - www.virginia.edu/sexualviolence. </p> <p>As your professor and as a person, know that I care about you and your well-being and stand ready to provide support and resources as I can. As a faculty member, I am a responsible employee, which means that I am required by University policy and federal law to report what you tell me to the University's Title IX Coordinator. The Title IX Coordinator's job is to ensure that the reporting student receives the resources and support that they need, while also reviewing the information presented to determine whether further action is necessary to ensure survivor safety and the safety of the University community. If you would rather keep this information confidential, there are Confidential Employees you can talk to on Grounds (See http://www.virginia.edu/justreportit/confidential_resources.pdf). The worst possible situation would be for you or your friend to remain silent when there are so many here willing and able to help. </p>"},{"location":"jtag/jtag/","title":"JTAG debugging 101","text":"<p>Mar 2025, 2025</p> <p></p> <p>Picture above: A JTAG debugger, among other things, connected to an Rpi3 board (see below for connection details) </p>"},{"location":"jtag/jtag/#overview","title":"Overview","text":"<p>JTAG is a specialized hardware interface that allows for in-situ debugging of a target board. It enables the observation of registers, setting of breakpoints, and monitoring of memory contents, providing an interactive debugging experience similar to that of QEMU (at least that's the goal).</p> <p>Verdict: JTAG debugging should not be considered a replacement for self-hosted debugging. It is more suitable for debugging bare-metal or embedded systems, or the early boot stages of an OS kernel.</p> <p>For rpi3 -- </p> <p>[V] breakpoint &amp; single step in kernel code</p> <p>[V] attach to a running core &amp; show registers, call stack, etc. (e.g. for debugging hang, deadlock) </p> <p>[?] breakpoint &amp; single step in user code (can be done, but tedious. see below)</p> <p>[X] reset target and halt (no luck)</p> <p>[X] load program to target (no luck)</p> <p>[X] read system registers (no luck)</p>"},{"location":"jtag/jtag/#comparison","title":"Comparison","text":""},{"location":"jtag/jtag/#jtag-debugging","title":"JTAG Debugging","text":"<ul> <li> <p>JTAG debugging: Using a JTAG debugger to attach to a target processor (e.g., BCM2835 on Raspberry Pi 3). The JTAG debugger serves as a bridge between the development machine and the target processor, communicating debugging commands (read/write of memory, registers, etc.).</p> </li> <li> <p>Pros: </p> <ul> <li>Interactive</li> <li>Can easily watch lots of information</li> <li>Less code to write</li> </ul> </li> <li>Cons: <ul> <li>Requires effort to set up (both hardware wiring and software tools)</li> <li>Debugging connection can be brittle and break occasionally</li> <li>Slower execution and single stepping</li> </ul> </li> </ul>"},{"location":"jtag/jtag/#self-hosting-debugging","title":"Self-Hosting Debugging","text":"<ul> <li> <p>Self-hosting debugging: Without an external debugger, the target system implements software debugging logic as part of the OS. This includes <code>printf</code> via UART, a trace buffer, and hardware breakpoints/watchpoints as supported by the processor.</p> </li> <li> <p>Pros: </p> <ul> <li>Mostly about collecting information (either in real-time such as UART messages, or post-mortem such as kernel event trace and CPU instruction trace) and analyzing it</li> <li>Less setup required</li> </ul> </li> <li>Cons: <ul> <li>More debugging code to write, which may introduce new bugs (e.g., deadlock in trace buffer)</li> </ul> </li> </ul>"},{"location":"jtag/jtag/#status-jtag-debugging-for-rpi3","title":"Status -- jtag debugging for rpi3","text":"<p>As of February 2025, there are two possible solutions:</p>"},{"location":"jtag/jtag/#solution-1-ftdi-based-jtag-debugger","title":"Solution 1: FTDI-based JTAG Debugger","text":"<ul> <li>Cost: Under $50</li> <li>Hardware: FT2232H chip, a USB-to-JTAG bridge</li> <li>Software: OpenOCD, which supports a variety of target boards, including Raspberry Pi 3 and 4. OpenOCD can run on Linux (including in a VM), WSL2 (through USB device passthrough), and natively on Windows.</li> </ul> <p>Pros: - Affordable - Wide support for different target boards</p> <p>Cons: - OpenOCD implements only basic debugging commands. - Breakpoints are set by overwriting instructions in memory instead of using hardware breakpoints. - Execution with conditional breakpoints is slow. - Cannot reset the target board to 'halt'; must attach the debugger while the target is in a waiting state. - Cannot read/write system registers, including debugging registers like DBGBCR0_EL1.</p>"},{"location":"jtag/jtag/#solution-2-segger-j-link-debugger","title":"Solution 2: Segger J-Link Debugger","text":"<ul> <li>Cost: Educational version at $60, full version $500 or more</li> <li>Software: More advanced than OpenOCD but lacks official support for Raspberry Pi boards.</li> </ul> <p>Pros: - More advanced software tools</p> <p>Cons: - Expensive - No official support for Raspberry Pi boards, leading to issues like \"Error: CTI connected to core not found. Debugging not possible.\" - More focused on microcontroller boards.</p> <p>References: - Stack Overflow discussion - Segger forum discussion</p> <p></p> <p>Therefore, despite J-Link's rich software support, the only solution to use it with Raspberry Pi 3 is OpenOCD, which suffers from all the drawbacks mentioned above.</p>"},{"location":"jtag/jtag/#setuphowto","title":"SetupHowto","text":""},{"location":"jtag/jtag/#hardware-wiring","title":"hardware wiring","text":""},{"location":"jtag/jtag/#overview_1","title":"Overview","text":"<p>NB: purple wire not connected.</p>"},{"location":"jtag/jtag/#diagram-source","title":"Diagram source","text":""},{"location":"jtag/jtag/#rpi3-side-connections","title":"rpi3-side connections","text":""},{"location":"jtag/jtag/#the-20-10-adapter","title":"the 20-10 adapter","text":""},{"location":"jtag/jtag/#the-jtag-debugger","title":"the JTAG debugger","text":""},{"location":"jtag/jtag/#the-rpi3-configtxt","title":"the rpi3 config.txt","text":"<p>add the following lines: </p> <pre><code>enable_jtag_gpio=1\ngpio=23-27=a4\ngpio=22=a4,pu\n</code></pre> <p>The idea is to put the gpios used for JTAG connection for \"alternate function 4\". gpio22 is special, which connects to the jtag TRST signal. It must be pulled up. discussion</p>"},{"location":"jtag/jtag/#openocd-commands","title":"OpenOCD Commands","text":"<p>tested on: Windows 11 + openocd-20240916 pre-built; Ubuntu 2204 + openocd from apt</p> <p>You need two configuration files: one for the target (Raspberry Pi 3) and one for the debugger (J-Link).</p> <p>The configuration files included with the OpenOCD package work fine.</p> <p>Here is an example <code>run.bat</code> file that launches the OpenOCD GDB server. Place this file in the OpenOCD directory:</p> <pre><code>@echo off\ncd /d \"%~dp0\"\nbin\\openocd.exe -f share/openocd/scripts/interface/jlink.cfg -f share/openocd/scripts/board/rpi3.cfg -c \"bindto 172.26.96.1\"\npause\n</code></pre> <p>In the example above, the server listens at <code>172.26.96.1</code>, which is the Windows machine's IP address with respect to the WSL2 VM. This allows GDB to connect from WSL2.</p> <p>Caveats: It is better to kill and restart OpenOCD every time the target board is reset; otherwise, GDB may show stale values (e.g., old PC from a previous run or all zeros for instructions and memory).</p>"},{"location":"jtag/jtag/#workflow","title":"Workflow","text":"<ol> <li>Kill <code>openocd</code>.</li> <li>Kill <code>gdb</code>.</li> <li>Reset the target board.</li> <li>Start <code>openocd</code>. This will attach to the running target and halt it at the current instruction.</li> <li>Start <code>gdb</code>.</li> </ol> <p>Due to step 4, the target code (OS) should be designed to wait for the debugger to attach. Otherwise, you won't have control over which code is being executed when the debugger attaches. This can be achieved by adding code to the OS that waits for a character from UART.</p> <p>Question: How to attach JTAG during the boot.S code? Answer: I use an infinite loop to wait for attachment and then change the loop condition from the JTAG to continue the boot process.</p>"},{"location":"jtag/jtag/#setting-breakpoints","title":"Setting Breakpoints","text":"<p>When attaching to the target, it runs the kernel code at EL1. Suppose GDB has already loaded the kernel ELF (<code>file kernel8.elf</code>), you can set a breakpoint like <code>b schedule()</code>.</p> <p>Setting a breakpoint in user code can only be done when the user address space is activated (i.e., TTBR0 is set to the user page table).</p> <p>To set a kernel breakpoint, for example, right before an <code>exec()</code> syscall returns: 1. Set a breakpoint at the user code, e.g., <code>b *0x1000</code>. 2. Before continuing, disarm all kernel breakpoints, e.g., <code>del 1</code>. Otherwise, once you return to EL0, GDB will try to re-install these breakpoints but cannot access kernel memory from EL0, resulting in errors. 3. Continue with <code>c</code>.</p> <p>Once the user breakpoint is hit, load the user symbols via <code>file user.elf</code>. You can then inspect the user memory, variables, etc.</p> <p>Caveat: You cannot proceed to the next instruction from the user breakpoint. Even deleting the breakpoint does not help, and the user code seems stuck there forever.</p>"},{"location":"jtag/jtag/#references","title":"References","text":"<p>https://metebalci.com/blog/bare-metal-raspberry-pi-3b-jtag/</p> <p>https://www.suse.com/c/debugging-raspberry-pi-3-with-jtag/</p> <p>https://www.linaro.org/blog/open-on-chip-debugger-ocd-at-linaro/</p> <p>https://collaborate.linaro.org/display/TCWGPUB/OpenOCD+for+AArch64</p> <p>https://linaro.atlassian.net/wiki/spaces/TCWGPUB/pages/25296346120/Raspberry+Pi+Linux+kernel+debugging+with+OpenOCD</p>"},{"location":"rpi3/rpi3-setup/","title":"Setup the raspi3 hardware","text":""},{"location":"rpi3/rpi3-setup/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Check list</li> <li>Prepare SD card</li> <li>Connect the UART cable<ol> <li>The legacy dongle (for VM users; not for WSL2 or native Win10 due to driver issues)</li> <li>The newer (SH-V09C5) dongle (for WSL2 or VM users)</li> <li>An example setup of Macbook Pro, which uses USBA-USBC adapter for the UART dongle</li> </ol> </li> <li>VM/Linux users: Configure the serial emulator<ol> <li>Pass through the SD card reader</li> <li>Pass through the USB-UART dongle</li> <li>Configure minicom via its config file (already done for VM users)</li> <li>Launch minicom</li> </ol> </li> <li>WSL2 users: Configure the serial emulator</li> <li>Power up &amp; test</li> <li>Build and install your kernel</li> <li>GAMEHAT setup</li> <li>Appendix -- minicom configuration via GUI<ol> <li>Minicom serial port settings</li> <li>Minicom terminal settings</li> </ol> </li> </ol>"},{"location":"rpi3/rpi3-setup/#1-check-list","title":"1. Check list","text":"<p>Students buy: | Item                                | Provided By | Notes                                                                 | |-------------------------------------|-------------|-----------------------------------------------------------------------| | Rpi3 board (Model B or B+)          | Student     | link  |</p> <p>Loaner instructions for students: 1. students specify which of the following items are needed. NB: for lab1--3, only item 1--5 are in use. 2. if you need item 1, specify: are you using WSL2 or VM 3. contact: Afsara Benazir (TA) hys4qm@ 4. Hardware-kit pickup spreadsheet (mark AFTER the pickup) link 5. keep any package and cables that come with items (esp item 4 the display), and return the item in its original package. </p> Item Needed for Notes 1. A USB-UART dongle Lab1 &amp; later WSL2 users: SH-V09C5. VM users: legacy FTDI dongles 2. A micro SD card (&gt;=16GB) Lab1 &amp; later 3. A micro SD card reader that plugs in to personal computers Lab1 &amp; later the loaner reader is USB-A, not USB-C. Update: On Mac, built-in SD reader cannot be passed through to VMfusion. Use a USB reader instead. ~~If your laptop lacks USB-A ports (e.g. a recent Macbook Pro), chances are that it has a built-in SD slot already; you just need a cheap microSD-SD adapter (no SD card reader needed) which TAs can provide~~ 4. A display w/ HDMI + an HDMI cable Lab1 &amp; later The loaner display comes with the needed HDMI-microHDMI cable &amp; USB-C power supply 5. A power supply for rpi3 (Micro USB, 5v3A, with inline switch) Lab1 &amp; later In a pinch, rpi3 can be powered via a microUSB cable connected to any USB-A port (e.g. from your PC, or any cheap USB charger). That should suffice for lab1/2 which do not draw high power. For later labs, better use 5v3A charger to provide enough power 6. USB keyboard Lab4 &amp; later 7. Waveshare GAME HAT Lab5+ - Battery  (18650 lithium) can be charged in place - HDMI cable for debugging with an external display - 40pin header extender, angled for debugging by exposing its UART port - Speaker"},{"location":"rpi3/rpi3-setup/#2-prepare-sd-card","title":"2. Prepare SD card","text":"<p>Assume that you have finished setting up VM here. </p> <p>Connect the SD card reader to VM. Then in the VM: </p> <pre><code>cd uva-os-main/make-sd/ \nsudo ./make-sd.sh /dev/sdX\n</code></pre> <p>Details here: How to prepare SD cards for experiments</p>"},{"location":"rpi3/rpi3-setup/#3-connect-the-uart-cable","title":"3. Connect the UART cable","text":"<pre><code>Rpi3 &lt;-- a USB-UART dongle ---&gt; PC (running a terminal emulator) \n</code></pre> <p>After you get a serial cable, you need to make the connection. </p>"},{"location":"rpi3/rpi3-setup/#31-the-legacy-dongle-for-vm-users-not-for-wsl2-or-native-win10-due-to-driver-issues","title":"3.1 The legacy dongle (for VM users; not for WSL2 or native Win10 due to driver issues)","text":""},{"location":"rpi3/rpi3-setup/#32-the-newer-sh-v09c5-dongle-for-wsl2-or-vm-users","title":"3.2 The newer (SH-V09C5) dongle (for WSL2 or VM users)","text":""},{"location":"rpi3/rpi3-setup/#33-an-example-setup-of-macbook-pro-which-uses-usba-usbc-adapter-for-the-uart-dongle-note-that-hdmi-is-yet-to-be-connected","title":"3.3 An example setup of Macbook Pro, which uses USBA-USBC adapter for the UART dongle. Note that HDMI is yet to be connected.","text":""},{"location":"rpi3/rpi3-setup/#4-vmlinux-users-configure-the-serial-emulator","title":"4. VM/Linux users: Configure the serial emulator","text":"<p>Assume that you have finished setting up VM here</p> <p>Notes on pass through USB devices </p> <ul> <li>on some laptops (e.g. Macbook Pro), the built-in SD card readers cannot be passed through to VM. If that happens, use the USB card reader instead. </li> <li>if you have a complex USB topology (e.g. the target USB device connected to a hub, which then connects to a dock, which connects to your computer), the  VM may not be able to recognize the USB device.  In that case, directly connect the USB device to a USB port on your computer </li> <li>if your laptop lacks USB-A ports, use a USBA-USBC adapter (often &lt;$2) which the TA should be able to give you one.</li> </ul>"},{"location":"rpi3/rpi3-setup/#41-pass-through-the-sd-card-reader","title":"4.1 Pass through the SD card reader","text":"<p>Often, when you plug in an SD card reader, there's a pop-up asking if you want to connect it to the VM.  Say yes.  If not, you can manually connect it.</p> <p>Example screenshot on Windows (Mac has a similar interface): </p> <p></p> <p>Once passed through, the VM (Ubuntu) should automatically recognize the SD card partitions (check the taskbar on the left),  and automatically mount the partitions as  <code>/media/student/bootfs</code> and <code>/media/student/UVA-OS/</code></p>"},{"location":"rpi3/rpi3-setup/#42-pass-through-the-usb-uart-dongle","title":"4.2 Pass through the USB-UART dongle","text":"<p>In the same way: </p> <p></p> <p>And confirm it: </p> <p></p> <p>On Mac, it's similar:</p> <p></p> <p>After that, do <code>sudo dmesg</code> from the VM terminal. Look for things like: </p> <p></p> <p>Here, the messages show that the USB-UART dongle is recognized as <code>/dev/ttyUSB0</code>.</p> <p>A common error (shown below) is that the USB-UART dongle malfunctions.  In such a case, unplug the dongle, wait a few seconds, and plug it back in.  Then check <code>dmesg</code> again. If the problem persists, ask for a replacement dongle. </p>"},{"location":"rpi3/rpi3-setup/#43-configure-minicom-via-its-config-file-already-done-for-vm-users","title":"4.3 Configure minicom via its config file (already done for VM users)","text":"<p>create the configure file, if it does not exist</p> <pre><code>sudo gedit /etc/minicom/minirc.dfl\n</code></pre> <p>And enter the following contents</p> <pre><code>pu port             /dev/ttyUSB0\npu baudrate        115200\npu bits            8\npu parity          N\npu stopbits        1\npu rtscts          No\npu addcarreturn  Yes\n</code></pre> <p>Save the file. </p>"},{"location":"rpi3/rpi3-setup/#44-launch-minicom","title":"4.4 Launch minicom","text":"<p>From the VM command line: </p> <pre><code>sudo minicom -b 115200 -o -D /dev/ttyUSB0 -C /tmp/minicom.log\n</code></pre> <p>Warning: your OS may give different names to the USB-UART dongle, e.g. /dev/ttyUSB1. Find it out by looking at <code>dmesg</code> output above. </p> <p>Some students report brltty service interfere the uart setup. You can check if the service is inactive like the screenshot shown below.</p> <p></p> <p>Some students report brltty service interfere the uart setup. You can check if the service is inactive like the screenshot shown below.</p> <p></p>"},{"location":"rpi3/rpi3-setup/#5-wsl2-users-configure-the-serial-emulator","title":"5. WSL2 users: Configure the serial emulator","text":"<p>PuTTY recommended. A sample configuration below. </p> <p></p> <p>Change the terminal settings like this:</p> <p></p> <p>Note: your PC may give different names to the USB-UART dongle, e.g. COM4. Find it out by looking at Windows Device Manager. </p>"},{"location":"rpi3/rpi3-setup/#6-power-up-test","title":"6. Power up &amp; test","text":"<p>Use a microUSB power supply rated at 5V3A or higher.  In a pinch, rpi3 can be powered via a microUSB cable connected to any USB-A port (e.g. from your PC, or any cheap USB charger, often rated 5V1A). That should suffice for lab1/2 which do not draw high power.  For later labs, better use 5v3A charger to provide enough power. </p> <p>If everything works OK, the provided \"test\" kernel (<code>make-sd/bootfs/kernel8-rpi3.img</code>, md5sum 074d1c0bae0a3572bc302d8f3d017a97) will boot and show on the UART: </p> <p></p> <p>To test the display, try <code>make-sd/bootfs/kernel8-rpi3-display.img</code> (to use it, rename this file to kernel8-rpi3.img on SD card and reboot rpi3). it will cycle through four colors on display:</p> <p>https://github.com/user-attachments/assets/194a12e3-30f1-481e-9378-114059aae0f9</p>"},{"location":"rpi3/rpi3-setup/#7-build-and-install-your-kernel","title":"7. Build and install your kernel","text":"<pre><code>cd uva-os-world1\nexport PLAT=rpi3\n</code></pre> Action Command To clean up <code>./cleanall.sh</code> To build everything <code>./makeall.sh</code> <p>If everything builds OK, <code>kernel/Makefile</code> should copy the kernel image (kernel8-rpi3.img) to the SD card, in the \"bootfs\" partition. See <code>kernel/Makefile</code> for details.</p>"},{"location":"rpi3/rpi3-setup/#8-gamehat-setup","title":"8. GAMEHAT setup","text":"<p>Follow the Waveshare website instructions to assemble it. LEAVE THE back cover off. Plug in the speaker for sound. Insert SD card and power up.</p> <p></p> <p>However the UART pins are blocked. To access it for debugging: </p> <p>Connect the 40pin header extender to the Rpi3. The connect the serial cable to the extender.</p> <p></p> <p>Put Rpi3 back on</p> <p></p> <p>Connect the display to the Rpi3 via a HDMI cable (the hard HDMI connector that comes with the gamehat is too short -- not used).</p> <p></p>"},{"location":"rpi3/rpi3-setup/#appendix-minicom-configuration-via-gui","title":"Appendix -- minicom configuration via GUI","text":""},{"location":"rpi3/rpi3-setup/#a1-minicom-serial-port-settings","title":"A.1 Minicom serial port settings","text":"<p>Press Ctrl-A then O to enter \"configuration\" </p> <p></p>"},{"location":"rpi3/rpi3-setup/#a2-minicom-terminal-settings","title":"A.2 Minicom terminal settings","text":"<p>(Note: T - Add carriage return : Yes) </p> <p></p> <p>Back to top</p>"},{"location":"vm/vmware/","title":"Running a Provided VM Image on Windows or macOS","text":""},{"location":"vm/vmware/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Running a Provided VM Image on Windows or macOS</li> <li>Installation<ul> <li>For Windows Users</li> <li>For macOS Users</li> </ul> </li> <li>Developing on VM, for the Rpi3 hardware<ul> <li>Pass through the SD card reader</li> <li>Pass through the USB-serial adapter</li> <li>Configure minicom via its config file (already done for VM users)</li> <li>Launch minicom</li> </ul> </li> <li>Appendix -- minicom configuration via GUI<ul> <li>Minicom serial port settings</li> <li>Minicom terminal settings</li> </ul> </li> </ul>"},{"location":"vm/vmware/#installation","title":"Installation","text":""},{"location":"vm/vmware/#for-windows-users","title":"For Windows Users:","text":"<ol> <li> <p>Download VMware Workstation:</p> <ul> <li>Download from box (UVA login required): https://virginia.box.com/s/drrnvm7o7h6e7lvhh6jaq1ogwqrk3nx1</li> <li>Alternatively, download the latest version from the VMware Workstation website.   <ul> <li>Windows: VMWare workstation Player 17</li> <li>Linux: VMware fusion 13.6.2</li> </ul> </li> </ul> </li> <li> <p>Install VMware Workstation:</p> </li> <li>Run the installer and follow the on-screen instructions, accepting the license agreement.</li> <li>Choose the installation path and complete the installation.</li> <li> <p>Restart the computer if prompted.</p> </li> <li> <p>Open VMware Workstation:</p> </li> <li> <p>Launch VMware Workstation from the Start Menu or desktop shortcut.</p> </li> <li> <p>Load the VM Image:</p> </li> <li>Copy the VM Image: Ensure access to the VM image file you\u2019ve provided (usually with extensions like <code>.vmx</code> for Workstation or <code>.ova</code> if you exported it).</li> <li> <p>Open the Image in VMware Workstation:</p> <ul> <li>Go to File &gt; Open in VMware Workstation and locate the VM image.</li> <li>Select it and click Open to load the VM.</li> </ul> </li> <li> <p>Configure VM Settings (if needed):</p> </li> <li> <p>Right-click the VM in VMware Workstation and select Settings to adjust memory, CPU, or network configurations if necessary.</p> </li> <li> <p>Run the VM:</p> </li> <li> <p>Click Power on this virtual machine to start using the VM.</p> </li> <li> <p>Shut Down the VM:</p> </li> <li>Either use Shut Down Guest from VMware\u2019s Power menu or shut down the operating system inside the VM.</li> </ol>"},{"location":"vm/vmware/#for-macos-users","title":"For macOS Users:","text":"<ol> <li>Download VMware Fusion:</li> <li>Download from box (UVA login required): https://virginia.box.com/s/drrnvm7o7h6e7lvhh6jaq1ogwqrk3nx1</li> <li> <p>Alternatively, go to the VMware Fusion website.</p> <ul> <li>Download the macOS version (VMware Fusion Player is free for personal use, while Pro requires a license).</li> </ul> </li> <li> <p>Install VMware Fusion:</p> </li> <li>Open the downloaded <code>.dmg</code> file and drag the VMware Fusion icon to the Applications folder.</li> <li> <p>Launch VMware Fusion and follow any setup instructions, such as allowing permissions in System Preferences &gt; Security &amp; Privacy.</p> </li> <li> <p>Open VMware Fusion:</p> </li> <li> <p>Start VMware Fusion from the Applications folder.</p> </li> <li> <p>Load the VM Image:</p> </li> <li>Copy the VM Image: Ensure you have access to the VM image file provided by you (typically <code>.ova</code> for cross-compatibility or <code>.vmx</code> if directly used on Fusion).</li> <li> <p>Open or Import the Image:</p> <ul> <li>If it\u2019s an <code>.ova</code> file, go to File &gt; Import and select the file to import it.</li> <li>If it\u2019s a <code>.vmx</code> file, go to File &gt; Open and select the file to open it directly.</li> </ul> </li> <li> <p>Configure VM Settings (if needed):</p> </li> <li> <p>Click on Virtual Machine &gt; Settings to adjust memory, CPU, or other settings.</p> </li> <li> <p>Run the VM:</p> </li> <li>Click Play or Start Up to power on the VM.</li> <li>To enable copy/paste across the VM and the host, do </li> </ol> <pre><code>sudo apt install open-vm-tools-desktop\n</code></pre> <ul> <li> <p>also cf: https://chatgpt.com/share/6795614b-5de8-8004-959c-6b02a22b15f2</p> </li> <li> <p>Shut Down the VM:</p> </li> <li>Choose Shut Down from VMware Fusion\u2019s Virtual Machine menu or shut down the OS inside the VM.</li> </ul>"},{"location":"vm/vmware/#setting-up-vm-for-development-for-rpi3-hardware","title":"Setting up VM for development for rpi3 hardware","text":"<p>see ../rpi3/README.md</p>"}]}